<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'Pimcore\Document\Tag\DelegatingTagHandler' shared autowired service.

$this->services['Pimcore\Document\Tag\DelegatingTagHandler'] = $instance = new \Pimcore\Document\Tag\DelegatingTagHandler();

$a = new \Pimcore\Document\Tag\TagHandler(${($_ = isset($this->services['Pimcore\Extension\Document\Areabrick\AreabrickManager']) ? $this->services['Pimcore\Extension\Document\Areabrick\AreabrickManager'] : $this->load('getAreabrickManagerService.php')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->getTemplatingService()) && false ?: '_'}, ${($_ = isset($this->services['pimcore.bundle_locator']) ? $this->services['pimcore.bundle_locator'] : $this->services['pimcore.bundle_locator'] = new \Pimcore\HttpKernel\BundleLocator\BundleLocator(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'})) && false ?: '_'}, ${($_ = isset($this->services['pimcore.web_path_resolver']) ? $this->services['pimcore.web_path_resolver'] : $this->services['pimcore.web_path_resolver'] = new \Pimcore\HttpKernel\WebPathResolver()) && false ?: '_'}, ${($_ = isset($this->services['pimcore.templating.action_renderer']) ? $this->services['pimcore.templating.action_renderer'] : $this->getPimcore_Templating_ActionRendererService()) && false ?: '_'}, ${($_ = isset($this->services['Pimcore\Http\RequestHelper']) ? $this->services['Pimcore\Http\RequestHelper'] : $this->getRequestHelperService()) && false ?: '_'}, new \Pimcore\Bundle\AdminBundle\Translation\AdminUserTranslator(${($_ = isset($this->services['Pimcore\Translation\Translator']) ? $this->services['Pimcore\Translation\Translator'] : $this->getTranslatorService()) && false ?: '_'}, ${($_ = isset($this->services['Pimcore\Bundle\AdminBundle\Security\User\UserLoader']) ? $this->services['Pimcore\Bundle\AdminBundle\Security\User\UserLoader'] : $this->getUserLoaderService()) && false ?: '_'}));
$a->setResponseStack(${($_ = isset($this->services['Pimcore\Http\ResponseStack']) ? $this->services['Pimcore\Http\ResponseStack'] : $this->services['Pimcore\Http\ResponseStack'] = new \Pimcore\Http\ResponseStack()) && false ?: '_'});
$a->setLogger(${($_ = isset($this->services['monolog.logger.pimcore']) ? $this->services['monolog.logger.pimcore'] : $this->load('getMonolog_Logger_PimcoreService.php')) && false ?: '_'});

$instance->addHandler($a);

return $instance;
